from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from config import BOT_TOKEN
import asyncio
import logging

from utils.gigachat import GigaChatAPI
from utils.kandinsky import generate_meal_image
from database import save_user, get_user_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
giga = GigaChatAPI()

async def check_user_profile(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = get_user_data(user_id)
    return user_data is not None

@dp.message(Command("start"))
async def start(message: types.Message):
    if await check_user_profile(message.from_user.id):
        user_data = get_user_data(message.from_user.id)
        await message.answer(
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω:\n"
            f"–ò–º—è: {user_data['name']}\n"
            f"–†–æ—Å—Ç: {user_data['height']} —Å–º\n"
            f"–í–µ—Å: {user_data['weight']} –∫–≥\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
            f"–¶–µ–ª—å: {user_data['goal']}\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/nutrition - –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
            "/generate_meal - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ\n"
            "/ask [–≤–æ–ø—Ä–æ—Å] - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GigaChat\n"
            "/update - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è/–†–æ—Å—Ç/–í–µ—Å/–í–æ–∑—Ä–∞—Å—Ç/–¶–µ–ª—å\n"
            "–ü—Ä–∏–º–µ—Ä: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä/180/75/30/–ø–æ—Ö—É–¥–µ–Ω–∏–µ"
        )

@dp.message(Command("update"))
async def update_profile(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è/–†–æ—Å—Ç/–í–µ—Å/–í–æ–∑—Ä–∞—Å—Ç/–¶–µ–ª—å")

@dp.message(lambda message: len(message.text.split('/')) == 5)
async def handle_profile(message: types.Message):
    try:
        name, height, weight, age, goal = message.text.split('/')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not all([name.strip(), height.strip(), weight.strip(), age.strip(), goal.strip()]):
            raise ValueError("–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            
        height_val = float(height)
        weight_val = float(weight)
        age_val = int(age)
        
        if height_val <= 0 or weight_val <= 0 or age_val <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
        
        save_user(
            user_id=message.from_user.id,
            name=name.strip(),
            height=height_val,
            weight=weight_val,
            age=age_val,
            goal=goal.strip()
        )
        await message.answer(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–ò–º—è: {name}\n–†–æ—Å—Ç: {height} —Å–º\n–í–µ—Å: {weight} –∫–≥\n–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n–¶–µ–ª—å: {goal}")
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –ò–º—è/–†–æ—Å—Ç/–í–µ—Å/–í–æ–∑—Ä–∞—Å—Ç/–¶–µ–ª—å\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω/180/75/30/–ø–æ—Ö—É–¥–µ–Ω–∏–µ")
    except Exception as e:
        logger.error(f"Error saving profile: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")

@dp.message(Command("nutrition"))
async def send_nutrition(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
        if not await check_user_profile(message.from_user.id):
            await message.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start")
            return

        user_data = get_user_data(message.from_user.id)
        logger.info(f"Generating nutrition plan for user: {user_data}")

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —á–µ—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        prompt = (
            f"–°–æ—Å—Ç–∞–≤—å –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 3 –¥–Ω—è –¥–ª—è –º—É–∂—á–∏–Ω—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏. "
    f"–≠—Ç–æ –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∞ –Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ.\n\n"
    f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
    f"- –í–µ—Å: {user_data['weight']} –∫–≥\n"
    f"- –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
    f"- –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
    f"- –¶–µ–ª—å: {user_data['goal']}\n\n"
    "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
    "=== –î–µ–Ω—å 1 ===\n"
    "**–ó–∞–≤—Ç—Ä–∞–∫:**\n"
    "- –û–≤—Å—è–Ω–∞—è –∫–∞—à–∞ –Ω–∞ –º–æ–ª–æ–∫–µ (50–≥ –æ–≤—Å—è–Ω–∫–∏ + 150–º–ª –º–æ–ª–æ–∫–∞)\n"
    "- 2 —è–π—Ü–∞ –≤–∞—Ä–µ–Ω—ã—Ö\n"
    "- 30–≥ –æ—Ä–µ—Ö–æ–≤\n\n"
    "**–û–±–µ–¥:**\n"
    "- 150–≥ –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏\n"
    "- 100–≥ –≥—Ä–µ—á–∫–∏ (—Å—É—Ö–æ–π –≤–µ—Å)\n"
    "- 200–≥ –æ–≤–æ—â–Ω–æ–≥–æ —Å–∞–ª–∞—Ç–∞\n\n"
    "**–£–∂–∏–Ω:**\n"
    "- 200–≥ –∑–∞–ø–µ—á–µ–Ω–Ω–æ–π —Ä—ã–±—ã\n"
    "- 150–≥ –±—É—Ä–æ–≥–æ —Ä–∏—Å–∞\n"
    "- 100–≥ —Ç—É—à–µ–Ω—ã—Ö –æ–≤–æ—â–µ–π\n\n"
    "**–ö–ë–ñ–£ –¥–Ω—è:** ~2500 –∫–∫–∞–ª | –ë: 180–≥ | –ñ: 90–≥ | –£: 250–≥\n\n"
    "=== –î–µ–Ω—å 2 ===\n"
    "(–∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)\n\n"
    "–í–∞–∂–Ω–æ: –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–ª–∞–Ω. –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏–µ—Ç–æ–ª–æ–≥—É."
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        processing_msg = await message.answer("‚åõ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...")

        # –ó–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            response = await asyncio.wait_for(
                giga.ask(prompt),
                timeout=30.0
            )
        except asyncio.TimeoutError:
            await processing_msg.delete()
            await message.answer("‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if not response or 'choices' not in response:
            await processing_msg.delete()
            raise Exception("–ù–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")

        plan = response['choices'][0]['message']['content']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
        if len(plan) < 100:
            await processing_msg.delete()
            raise Exception("–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        chunks = [plan[i:i+4000] for i in range(0, len(plan), 4000)]
        
        await processing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        header = (
            f"üçè *–ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø* üçè\n\n"
            f"*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
            f"- –í–µ—Å: {user_data['weight']} –∫–≥\n"
            f"- –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
            f"- –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
            f"- –¶–µ–ª—å: {user_data['goal']}\n\n"
        )
        
        first_chunk = header + chunks[0]
        await message.answer(first_chunk, parse_mode="Markdown")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
        for chunk in chunks[1:]:
            await message.answer(chunk)
            
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        await message.answer(
            "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            "1. –ü–µ–π—Ç–µ 2-3 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å\n"
            "2. –°–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è\n"
            "3. –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n\n"
            "üîÑ –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /nutrition",
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}", exc_info=True)
        error_msg = (
            "‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è (/start)\n"
            "2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å\n"
            "3. –ü–æ–¥–æ–∂–¥–∞—Ç—å 5 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞\n\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        )
        await message.answer(error_msg, parse_mode="Markdown")

@dp.message(Command("generate_meal"))
async def generate_meal(message: types.Message):
    if not await check_user_profile(message.from_user.id):
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start")
        return
        
    try:
        user_data = get_user_data(message.from_user.id)
        prompt = (
            f"–ü—Ä–∏–¥—É–º–∞–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞ –¥–ª—è:\n"
            f"- –í–µ—Å: {user_data['weight']} –∫–≥\n"
            f"- –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
            f"- –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
            f"- –¶–µ–ª—å: {user_data['goal']}\n\n"
            f"–û–ø–∏—à–∏:\n"
            f"1. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ç–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)\n"
            f"2. –ü–æ—à–∞–≥–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç\n"
            f"3. –ü–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å"
        )
        
        response = await giga.ask(prompt)
        meal_description = response['choices'][0]['message']['content']
        image_url = generate_meal_image(f"{user_data['goal']}: {meal_description[:80]}...")
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=image_url,
            caption=meal_description[:1000]
        )
    except Exception as e:
        logger.error(f"Meal generation error: {str(e)}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("ask"))
async def handle_gigachat(message: types.Message):
    try:
        question = message.text[4:].strip()  # –£–±–∏—Ä–∞–µ–º "/ask "
        if not question:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
            return
            
        response = await giga.ask(question)
        answer = response['choices'][0]['message']['content']
        await message.answer(answer[:4000])
    except Exception as e:
        logger.error(f"GigaChat error: {str(e)}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message()
async def handle_unknown(message: types.Message):
    if await check_user_profile(message.from_user.id):
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /nutrition, /generate_meal –∏–ª–∏ /ask")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
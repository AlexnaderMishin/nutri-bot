from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import BOT_TOKEN
import asyncio
import logging

from database import save_user, get_user_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

def get_main_keyboard():
    buttons = [
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

async def check_user_profile(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return get_user_data(user_id) is not None

@router.message(Command("start") | F.text == "‚ùì –ü–æ–º–æ—â—å")
async def start(message: types.Message):
    if await check_user_profile(message.from_user.id):
        user_data = get_user_data(message.from_user.id)
        await message.answer(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üë§ –ü—Ä–æ—Ñ–∏–ª—å - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n\n"
            f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–ò–º—è: {user_data['name']}\n"
            f"–†–æ—Å—Ç: {user_data['height']} —Å–º\n"
            f"–í–µ—Å: {user_data['weight']} –∫–≥\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
            f"–¶–µ–ª—å: {user_data['goal']}",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ò–º—è/–†–æ—Å—Ç/–í–µ—Å/–í–æ–∑—Ä–∞—Å—Ç/–¶–µ–ª—å\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä/180/75/30/–ø–æ—Ö—É–¥–µ–Ω–∏–µ",
            reply_markup=get_main_keyboard()
        )

@router.message(Command("profile") | F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    if not await check_user_profile(message.from_user.id):
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è/–†–æ—Å—Ç/–í–µ—Å/–í–æ–∑—Ä–∞—Å—Ç/–¶–µ–ª—å", 
                           reply_markup=get_main_keyboard())
        return
    
    user_data = get_user_data(message.from_user.id)
    await message.answer(
        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {user_data['name']}\n"
        f"–†–æ—Å—Ç: {user_data['height']} —Å–º\n"
        f"–í–µ—Å: {user_data['weight']} –∫–≥\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
        f"–¶–µ–ª—å: {user_data['goal']}",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("update") | F.text == "‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def update_profile(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è/–†–æ—Å—Ç/–í–µ—Å/–í–æ–∑—Ä–∞—Å—Ç/–¶–µ–ª—å\n\n"
        "–ü—Ä–∏–º–µ—Ä: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä/180/75/30/–ø–æ—Ö—É–¥–µ–Ω–∏–µ\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_update(message: types.Message):
    await message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())

@router.message(lambda message: len(message.text.split('/')) == 5)
async def handle_profile(message: types.Message):
    try:
        name, height, weight, age, goal = message.text.split('/')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not all([name.strip(), height.strip(), weight.strip(), age.strip(), goal.strip()]):
            raise ValueError("–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            
        height_val = float(height)
        weight_val = float(weight)
        age_val = int(age)
        
        if height_val <= 0 or weight_val <= 0 or age_val <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
        
        save_user(
            user_id=message.from_user.id,
            name=name.strip(),
            height=height_val,
            weight=weight_val,
            age=age_val,
            goal=goal.strip()
        )
        await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=get_main_keyboard())
        await show_profile(message)
    except ValueError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –ò–º—è/–†–æ—Å—Ç/–í–µ—Å/–í–æ–∑—Ä–∞—Å—Ç/–¶–µ–ª—å\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω/180/75/30/–ø–æ—Ö—É–¥–µ–Ω–∏–µ",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è", reply_markup=get_main_keyboard())

@router.message()
async def handle_unknown(message: types.Message):
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá",
        reply_markup=get_main_keyboard()
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
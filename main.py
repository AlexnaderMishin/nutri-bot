from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import BOT_TOKEN
import asyncio
import logging
import datetime

from database import save_user, get_user_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
router = Router()

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("/profile"), KeyboardButton("/update")],
            [KeyboardButton("/food_add"), KeyboardButton("/food_today")],
            [KeyboardButton("/help")]
        ],
        resize_keyboard=True
    )

async def check_user_profile(user_id: int) -> bool:
    return get_user_data(user_id) is not None

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        f"üìÖ –°–µ–≥–æ–¥–Ω—è: {datetime.datetime.now().strftime('%d.%m.%Y')}\n\n"
    )
    
    if not await check_user_profile(message.from_user.id):
        await message.answer(
            welcome_text +
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–ò–º—è / –†–æ—Å—Ç / –í–µ—Å / –í–æ–∑—Ä–∞—Å—Ç / –¶–µ–ª—å</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä / 180 / 75 / 30 / –ø–æ—Ö—É–¥–µ–Ω–∏–µ</code>",
            parse_mode="HTML"
        )
    else:
        user_data = get_user_data(message.from_user.id)
        await message.answer(
            welcome_text +
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ üëá",
            reply_markup=get_commands_keyboard(),
            parse_mode="HTML"
        )

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/profile - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/update - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–î–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
        "<code>–ò–º—è / –†–æ—Å—Ç / –í–µ—Å / –í–æ–∑—Ä–∞—Å—Ç / –¶–µ–ª—å</code>",
        reply_markup=get_commands_keyboard(),
        parse_mode="HTML"
    )
# –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
@router.message(Command("food_add"))
async def add_food_start(message: types.Message):
    await message.answer(
        "üçé –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –µ–¥–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–ù–∞–∑–≤–∞–Ω–∏–µ / –ö–∞–ª–æ—Ä–∏–∏ / –ë–µ–ª–∫–∏ / –ñ–∏—Ä—ã / –£–≥–ª–µ–≤–æ–¥—ã</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ / 165 / 31 / 3.6 / 0</code>",
        parse_mode="HTML"
    )

@router.message(lambda message: len(message.text.split('/')) == 5)
async def handle_food_entry(message: types.Message):
    try:
        parts = [x.strip() for x in message.text.split('/')]
        if not all(parts):
            raise ValueError("–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
            
        food_name, calories, protein, fats, carbs = parts
        save_food_entry(
            user_id=message.from_user.id,
            food_name=food_name,
            calories=int(calories),
            protein=float(protein),
            fats=float(fats),
            carbs=float(carbs)
        )
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {food_name}")
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")

@router.message(Command("food_today"))
async def show_today_food(message: types.Message):
    entries = get_today_food_entries(message.from_user.id)
    if not entries:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏")
        return
    
    total = {"calories": 0, "protein": 0, "fats": 0, "carbs": 0}
    response = ["üìä <b>–°–µ–≥–æ–¥–Ω—è —Å—ä–µ–¥–µ–Ω–æ:</b>"]
    
    for entry in entries:
        response.append(f"üç¥ {entry.food_name}: {entry.calories} –∫–∫–∞–ª (–ë: {entry.protein}–≥, –ñ: {entry.fats}–≥, –£: {entry.carbs}–≥)")
        total["calories"] += entry.calories
        total["protein"] += entry.protein
        total["fats"] += entry.fats
        total["carbs"] += entry.carbs
    
    response.append(f"\n<b>–ò—Ç–æ–≥–æ:</b> {total['calories']} –∫–∫–∞–ª | –ë: {total['protein']}–≥ | –ñ: {total['fats']}–≥ | –£: {total['carbs']}–≥")
    
    await message.answer("\n".join(response), parse_mode="HTML")

@router.message(Command("profile"))
async def show_profile(message: types.Message):
    if not await check_user_profile(message.from_user.id):
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /start")
        return
    
    user_data = get_user_data(message.from_user.id)
    await message.answer(
        "üìã <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"üë§ –ò–º—è: {user_data['name']}\n"
        f"üìè –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
        f"‚öñÔ∏è –í–µ—Å: {user_data['weight']} –∫–≥\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
        f"üéØ –¶–µ–ª—å: {user_data['goal']}",
        reply_markup=get_commands_keyboard(),
        parse_mode="HTML"
    )

@router.message(Command("update"))
async def update_profile(message: types.Message):
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–ò–º—è / –†–æ—Å—Ç / –í–µ—Å / –í–æ–∑—Ä–∞—Å—Ç / –¶–µ–ª—å</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä / 180 / 75 / 30 / –ø–æ—Ö—É–¥–µ–Ω–∏–µ</code>",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        ),
        parse_mode="HTML"
    )

@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_update(message: types.Message):
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_commands_keyboard())

@router.message(lambda message: len(message.text.split('/')) == 5)
async def handle_profile_data(message: types.Message):
    try:
        name, height, weight, age, goal = [x.strip() for x in message.text.split('/')]
        
        if not all([name, height, weight, age, goal]):
            raise ValueError("–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            
        height_val = float(height)
        weight_val = float(weight)
        age_val = int(age)
        
        if height_val <= 0 or weight_val <= 0 or age_val <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
        
        save_user(
            user_id=message.from_user.id,
            name=name,
            height=height_val,
            weight=weight_val,
            age=age_val,
            goal=goal
        )
        await message.answer(
            "‚úÖ <b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>",
            reply_markup=get_commands_keyboard(),
            parse_mode="HTML"
        )
        await show_profile(message)
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "<b>–ò–º—è / –†–æ—Å—Ç / –í–µ—Å / –í–æ–∑—Ä–∞—Å—Ç / –¶–µ–ª—å</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>–ò–≤–∞–Ω / 180 / 75 / 30 / –ø–æ—Ö—É–¥–µ–Ω–∏–µ</code>",
            reply_markup=get_commands_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö</b>",
            reply_markup=get_commands_keyboard(),
            parse_mode="HTML"
        )

@router.message()
async def handle_unknown(message: types.Message):
    if await check_user_profile(message.from_user.id):
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ üëá",
            reply_markup=get_commands_keyboard()
        )
    else:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–ò–º—è / –†–æ—Å—Ç / –í–µ—Å / –í–æ–∑—Ä–∞—Å—Ç / –¶–µ–ª—å</b>",
            parse_mode="HTML"
        )

async def main():
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
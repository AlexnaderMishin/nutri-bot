from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import BOT_TOKEN
import asyncio
import logging
import datetime
from database import save_user, get_user_data, save_food_entry, get_today_food_entries

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class FoodEntryStates(StatesGroup):
    waiting_for_food_name = State()
    waiting_for_calories = State()
    waiting_for_protein = State()
    waiting_for_fats = State()
    waiting_for_carbs = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_commands_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/profile"), KeyboardButton(text="/update")],
            [KeyboardButton(text="/diary"), KeyboardButton(text="/add_food")],
            [KeyboardButton(text="/help")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É..."
    )

def get_food_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üçé –Ø–±–ª–æ–∫–æ"), KeyboardButton(text="ü•© –ö—É—Ä–∏—Ü–∞")],
            [KeyboardButton(text="üçö –†–∏—Å"), KeyboardButton(text="ü•ë –ê–≤–æ–∫–∞–¥–æ")],
            [KeyboardButton(text="üçå –ë–∞–Ω–∞–Ω"), KeyboardButton(text="ü•ö –Ø–π—Ü–æ")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_user_profile(user_id: int) -> bool:
    return get_user_data(user_id) is not None

# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FoodTracker!</b>\n\n"
        f"üìÖ –°–µ–≥–æ–¥–Ω—è: {datetime.datetime.now().strftime('%d.%m.%Y')}\n\n"
    )
    
    if not await check_user_profile(message.from_user.id):
        await message.answer(
            welcome_text +
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å.\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–ò–º—è / –†–æ—Å—Ç / –í–µ—Å / –í–æ–∑—Ä–∞—Å—Ç / –¶–µ–ª—å</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä / 180 / 75 / 30 / –ø–æ—Ö—É–¥–µ–Ω–∏–µ</code>",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            welcome_text +
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ üëá",
            reply_markup=get_commands_keyboard(),
            parse_mode="HTML"
        )

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/update - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        "/diary - –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è\n"
        "/add_food - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
        "üìä <i>–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å—Ç–∞–ª–æ –ø—Ä–æ—â–µ!</i>",
        reply_markup=get_commands_keyboard(),
        parse_mode="HTML"
    )

@router.message(Command("profile"))
async def show_profile(message: types.Message):
    if not await check_user_profile(message.from_user.id):
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /start")
        return
    
    user_data = get_user_data(message.from_user.id)
    await message.answer(
        "üìã <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"üë§ –ò–º—è: {user_data['name']}\n"
        f"üìè –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
        f"‚öñÔ∏è –í–µ—Å: {user_data['weight']} –∫–≥\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
        f"üéØ –¶–µ–ª—å: {user_data['goal']}",
        reply_markup=get_commands_keyboard(),
        parse_mode="HTML"
    )

# ==================== –î–ù–ï–í–ù–ò–ö –ü–ò–¢–ê–ù–ò–Ø ====================
@router.message(Command("diary"))
async def show_diary(message: types.Message):
    entries = get_today_food_entries(message.from_user.id)
    
    if not entries:
        await message.answer(
            "üìù <b>–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –ø—É—Å—Ç</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_food —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å",
            parse_mode="HTML"
        )
        return
    
    total = {'calories': 0, 'protein': 0, 'fats': 0, 'carbs': 0}
    text = "üìä <b>–í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
    
    for idx, entry in enumerate(entries, 1):
        text += (
            f"{idx}. üç¥ <u>{entry.food_name}</u>\n"
            f"   üî• {entry.calories} –∫–∫–∞–ª  "
            f"ü•© {entry.protein}–≥  "
            f"ü•ë {entry.fats}–≥  "
            f"üçû {entry.carbs}–≥\n\n"
        )
        
        total['calories'] += entry.calories
        total['protein'] += entry.protein
        total['fats'] += entry.fats
        total['carbs'] += entry.carbs
    
    text += (
        "üßÆ <b>–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</b>\n"
        f"üî• <i>{total['calories']}</i> –∫–∫–∞–ª\n"
        f"ü•© –ë–µ–ª–∫–∏: <i>{total['protein']:.1f}</i>–≥\n"
        f"ü•ë –ñ–∏—Ä—ã: <i>{total['fats']:.1f}</i>–≥\n"
        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: <i>{total['carbs']:.1f}</i>–≥"
    )
    
    await message.answer(text, parse_mode="HTML")

# ==================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê ====================
@router.message(Command("add_food"))
async def start_food_entry(message: types.Message, state: FSMContext):
    if not await check_user_profile(message.from_user.id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start")
        return
    
    await message.answer(
        "üçé <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:</b>\n"
        "<i>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –±—ã—Å—Ç—Ä–æ–≥–æ –º–µ–Ω—é</i>",
        parse_mode="HTML",
        reply_markup=get_food_keyboard()
    )
    await state.set_state(FoodEntryStates.waiting_for_food_name)

@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_food_entry(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_commands_keyboard()
    )

@router.message(FoodEntryStates.waiting_for_food_name)
async def process_food_name(message: types.Message, state: FSMContext):
    await state.update_data(food_name=message.text)
    await message.answer(
        "üî• <b>–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–Ω–∞ 100–≥):</b>\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 52</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(FoodEntryStates.waiting_for_calories)

@router.message(FoodEntryStates.waiting_for_calories)
async def process_calories(message: types.Message, state: FSMContext):
    try:
        calories = float(message.text)
        await state.update_data(calories=calories)
        await message.answer(
            "ü•© <b>–ë–µ–ª–∫–∏ (–≥ –Ω–∞ 100–≥):</b>\n"
            "<i>–ü—Ä–∏–º–µ—Ä: 0.3</i>",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(FoodEntryStates.waiting_for_protein)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@router.message(FoodEntryStates.waiting_for_protein)
async def process_protein(message: types.Message, state: FSMContext):
    try:
        protein = float(message.text)
        await state.update_data(protein=protein)
        await message.answer(
            "ü•ë <b>–ñ–∏—Ä—ã (–≥ –Ω–∞ 100–≥):</b>\n"
            "<i>–ü—Ä–∏–º–µ—Ä: 0.2</i>",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(FoodEntryStates.waiting_for_fats)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@router.message(FoodEntryStates.waiting_for_fats)
async def process_fats(message: types.Message, state: FSMContext):
    try:
        fats = float(message.text)
        await state.update_data(fats=fats)
        await message.answer(
            "üçû <b>–£–≥–ª–µ–≤–æ–¥—ã (–≥ –Ω–∞ 100–≥):</b>\n"
            "<i>–ü—Ä–∏–º–µ—Ä: 14</i>",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(FoodEntryStates.waiting_for_carbs)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@router.message(FoodEntryStates.waiting_for_carbs)
async def process_carbs(message: types.Message, state: FSMContext):
    try:
        carbs = float(message.text)
        data = await state.get_data()
        
        save_food_entry(
            user_id=message.from_user.id,
            food_name=data['food_name'],
            calories=data['calories'],
            protein=data['protein'],
            fats=data['fats'],
            carbs=carbs
        )
        
        await message.answer(
            "‚úÖ <b>–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üçè {data['food_name']}\n"
            f"üî• {data['calories']} –∫–∫–∞–ª\n"
            f"ü•© {data['protein']}–≥ –±–µ–ª–∫–æ–≤\n"
            f"ü•ë {data['fats']}–≥ –∂–∏—Ä–æ–≤\n"
            f"üçû {carbs}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤",
            parse_mode="HTML",
            reply_markup=get_commands_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

# ==================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø ====================
@router.message(Command("update"))
async def update_profile(message: types.Message):
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–ò–º—è / –†–æ—Å—Ç / –í–µ—Å / –í–æ–∑—Ä–∞—Å—Ç / –¶–µ–ª—å</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä / 180 / 75 / 30 / –ø–æ—Ö—É–¥–µ–Ω–∏–µ</code>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(lambda message: len(message.text.split('/')) == 5)
async def handle_profile_data(message: types.Message):
    try:
        name, height, weight, age, goal = [x.strip() for x in message.text.split('/')]
        
        if not all([name, height, weight, age, goal]):
            raise ValueError("–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            
        height_val = float(height)
        weight_val = float(weight)
        age_val = int(age)
        
        if height_val <= 0 or weight_val <= 0 or age_val <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
        
        save_user(
            user_id=message.from_user.id,
            name=name,
            height=height_val,
            weight=weight_val,
            age=age_val,
            goal=goal
        )
        await message.answer(
            "‚úÖ <b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>",
            reply_markup=get_commands_keyboard(),
            parse_mode="HTML"
        )
        await show_profile(message)
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "<b>–ò–º—è / –†–æ—Å—Ç / –í–µ—Å / –í–æ–∑—Ä–∞—Å—Ç / –¶–µ–ª—å</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>–ò–≤–∞–Ω / 180 / 75 / 30 / –ø–æ—Ö—É–¥–µ–Ω–∏–µ</code>",
            parse_mode="HTML"
        )

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async def main():
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
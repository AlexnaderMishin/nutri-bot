from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import BOT_TOKEN
import asyncio
import logging

from database import save_user, get_user_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
router = Router()

def get_main_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="update")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
    )

async def check_user_profile(user_id: int) -> bool:
    return get_user_data(user_id) is not None

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    if await check_user_profile(message.from_user.id):
        await message.answer(
            "üîπ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> üîπ\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–ò–º—è / –†–æ—Å—Ç / –í–µ—Å / –í–æ–∑—Ä–∞—Å—Ç / –¶–µ–ª—å</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä / 180 / 75 / 30 / –ø–æ—Ö—É–¥–µ–Ω–∏–µ</code>",
            parse_mode="HTML"
        )

@router.callback_query(F.data == "help")
async def callback_help(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b> ‚ÑπÔ∏è\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n"
        "‚Ä¢ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ <b>–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</b> - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        "–î–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
        "<code>–ò–º—è / –†–æ—Å—Ç / –í–µ—Å / –í–æ–∑—Ä–∞—Å—Ç / –¶–µ–ª—å</code>",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "profile")
async def callback_profile(callback: types.CallbackQuery):
    if not await check_user_profile(callback.from_user.id):
        await callback.message.edit_text(
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /start",
            reply_markup=get_main_menu()
        )
        return
    
    user_data = get_user_data(callback.from_user.id)
    await callback.message.edit_text(
        "üìã <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b> üìã\n\n"
        f"üë§ <b>–ò–º—è:</b> {user_data['name']}\n"
        f"üìè <b>–†–æ—Å—Ç:</b> {user_data['height']} —Å–º\n"
        f"‚öñÔ∏è <b>–í–µ—Å:</b> {user_data['weight']} –∫–≥\n"
        f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user_data['age']} –ª–µ—Ç\n"
        f"üéØ <b>–¶–µ–ª—å:</b> {user_data['goal']}",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "update")
async def callback_update(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b> ‚úèÔ∏è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–ò–º—è / –†–æ—Å—Ç / –í–µ—Å / –í–æ–∑—Ä–∞—Å—Ç / –¶–µ–ª—å</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä / 180 / 75 / 30 / –ø–æ—Ö—É–¥–µ–Ω–∏–µ</code>\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /start",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(lambda message: len(message.text.split('/')) == 5)
async def handle_profile_data(message: types.Message):
    try:
        name, height, weight, age, goal = [x.strip() for x in message.text.split('/')]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not all([name, height, weight, age, goal]):
            raise ValueError("–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            
        height_val = float(height)
        weight_val = float(weight)
        age_val = int(age)
        
        if height_val <= 0 or weight_val <= 0 or age_val <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
        
        save_user(
            user_id=message.from_user.id,
            name=name,
            height=height_val,
            weight=weight_val,
            age=age_val,
            goal=goal
        )
        await message.answer(
            "‚úÖ <b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "<b>–ò–º—è / –†–æ—Å—Ç / –í–µ—Å / –í–æ–∑—Ä–∞—Å—Ç / –¶–µ–ª—å</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>–ò–≤–∞–Ω / 180 / 75 / 30 / –ø–æ—Ö—É–¥–µ–Ω–∏–µ</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏</b>",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )

@router.message()
async def handle_other_messages(message: types.Message):
    if await check_user_profile(message.from_user.id):
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–ò–º—è / –†–æ—Å—Ç / –í–µ—Å / –í–æ–∑—Ä–∞—Å—Ç / –¶–µ–ª—å</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä / 180 / 75 / 30 / –ø–æ—Ö—É–¥–µ–Ω–∏–µ</code>",
            parse_mode="HTML"
        )

async def main():
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
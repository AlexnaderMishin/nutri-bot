from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from config import BOT_TOKEN
import asyncio
import logging

from utils.gigachat import GigaChatAPI
from utils.kandinsky import generate_meal_image
from database import save_user, get_user_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
giga = GigaChatAPI()

async def check_user_profile(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = get_user_data(user_id)
    return user_data is not None

@dp.message(Command("start"))
async def start(message: types.Message):
    if await check_user_profile(message.from_user.id):
        user_data = get_user_data(message.from_user.id)
        await message.answer(
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω:\n"
            f"–ò–º—è: {user_data['name']}\n"
            f"–†–æ—Å—Ç: {user_data['height']} —Å–º\n"
            f"–í–µ—Å: {user_data['weight']} –∫–≥\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
            f"–¶–µ–ª—å: {user_data['goal']}\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/nutrition - –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
            "/generate_meal - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ\n"
            "/ask [–≤–æ–ø—Ä–æ—Å] - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GigaChat\n"
            "/update - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"
            "/test_giga - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"
            "/show_config - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è/–†–æ—Å—Ç/–í–µ—Å/–í–æ–∑—Ä–∞—Å—Ç/–¶–µ–ª—å\n"
            "–ü—Ä–∏–º–µ—Ä: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä/180/75/30/–ø–æ—Ö—É–¥–µ–Ω–∏–µ"
        )

@dp.message(Command("update"))
async def update_profile(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è/–†–æ—Å—Ç/–í–µ—Å/–í–æ–∑—Ä–∞—Å—Ç/–¶–µ–ª—å")

@dp.message(lambda message: len(message.text.split('/')) == 5)
async def handle_profile(message: types.Message):
    try:
        name, height, weight, age, goal = message.text.split('/')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not all([name.strip(), height.strip(), weight.strip(), age.strip(), goal.strip()]):
            raise ValueError("–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            
        height_val = float(height)
        weight_val = float(weight)
        age_val = int(age)
        
        if height_val <= 0 or weight_val <= 0 or age_val <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
        
        save_user(
            user_id=message.from_user.id,
            name=name.strip(),
            height=height_val,
            weight=weight_val,
            age=age_val,
            goal=goal.strip()
        )
        await message.answer(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–ò–º—è: {name}\n–†–æ—Å—Ç: {height} —Å–º\n–í–µ—Å: {weight} –∫–≥\n–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n–¶–µ–ª—å: {goal}")
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –ò–º—è/–†–æ—Å—Ç/–í–µ—Å/–í–æ–∑—Ä–∞—Å—Ç/–¶–µ–ª—å\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω/180/75/30/–ø–æ—Ö—É–¥–µ–Ω–∏–µ")
    except Exception as e:
        logger.error(f"Error saving profile: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")

@dp.message(Command("nutrition"))
async def send_nutrition(message: types.Message):
    try:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 4 –ø—Ä–æ–±–µ–ª–∞)
        user_data = get_user_data(message.from_user.id)
        if not user_data:
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GigaChat
        prompt = (
            f"–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è:\n"
            f"- –í–µ—Å: {user_data['weight']} –∫–≥\n"
            f"- –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
            f"- –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
            f"- –¶–µ–ª—å: {user_data['goal']}\n\n"
            "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "1. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å\n"
            "2. –ë–∞–ª–∞–Ω—Å –ë–ñ–£\n"
            "3. –ü—Ä–∏–º–µ—Ä –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏"
        )
        
        response = await giga.ask(prompt)
        plan = response['choices'][0]['message']['content']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–≤—ã—á–∫–∏ –∏ —Å–∫–æ–±–∫–∏)
        formatted_plan = (
            "üçé *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è* üçé\n\n"
            "üîπ *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
            f"‚Ä¢ –í–µ—Å: {user_data['weight']} –∫–≥\n"
            f"‚Ä¢ –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
            f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
            f"‚Ä¢ –¶–µ–ª—å: {user_data['goal']}\n\n"
            "üìä *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            "```\n"
            f"{self._extract_section(plan, '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å')}\n"
            "```\n\n"
            "üçΩÔ∏è *–ü—Ä–∏–º–µ—Ä –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å:*\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "üç≥ *–ó–∞–≤—Ç—Ä–∞–∫:*\n"
            f"{self._format_meal(plan, '–ó–∞–≤—Ç—Ä–∞–∫')}\n\n"
            "‚òï *–ü–µ—Ä–µ–∫—É—Å:*\n"
            f"{self._format_meal(plan, '–ü–µ—Ä–µ–∫—É—Å')}\n\n"
            "üçó *–û–±–µ–¥:*\n"
            f"{self._format_meal(plan, '–û–±–µ–¥')}\n\n"
            "ü•ó *–£–∂–∏–Ω:*\n"
            f"{self._format_meal(plan, '–£–∂–∏–Ω')}\n\n"
            "üíß *–°–æ–≤–µ—Ç:* –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–∏—Ç—å –≤–æ–¥—É!"
        )
        
        await message.answer(
            formatted_plan,
            parse_mode="MarkdownV2",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2 –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error generating nutrition plan: {str(e)}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def _format_meal(self, plan: str, meal_type: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
    parts = plan.split(f"{meal_type}:")
    if len(parts) > 1:
        meal = parts[1].split("\n\n")[0].strip()
        return "‚Ä¢ " + meal.replace("\n", "\n‚Ä¢ ")
    return "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

def _extract_section(self, text: str, section_name: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ–∫—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if section_name in text:
        return text.split(section_name)[1].split("\n\n")[0].strip()
    return "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

@dp.message(Command("generate_meal"))
async def generate_meal(message: types.Message):
    if not await check_user_profile(message.from_user.id):
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start")
        return
        
    try:
        user_data = get_user_data(message.from_user.id)
        prompt = (
            f"–ü—Ä–∏–¥—É–º–∞–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞ –¥–ª—è:\n"
            f"- –í–µ—Å: {user_data['weight']} –∫–≥\n"
            f"- –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
            f"- –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
            f"- –¶–µ–ª—å: {user_data['goal']}\n\n"
            f"–û–ø–∏—à–∏:\n"
            f"1. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ç–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)\n"
            f"2. –ü–æ—à–∞–≥–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç\n"
            f"3. –ü–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å"
        )
        
        response = await giga.ask(prompt)
        meal_description = response['choices'][0]['message']['content']
        image_url = generate_meal_image(f"{user_data['goal']}: {meal_description[:80]}...")
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=image_url,
            caption=meal_description[:1000]
        )
    except Exception as e:
        logger.error(f"Meal generation error: {str(e)}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("ask"))
async def handle_gigachat(message: types.Message):
    try:
        question = message.text[4:].strip()  # –£–±–∏—Ä–∞–µ–º "/ask "
        if not question:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
            return
            
        response = await giga.ask(question)
        answer = response['choices'][0]['message']['content']
        await message.answer(answer[:4000])
    except Exception as e:
        logger.error(f"GigaChat error: {str(e)}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("show_config"))
async def show_config(message: types.Message):
    from config import BOT_TOKEN, GIGACHAT_AUTH_KEY, DATABASE_URL
    config_info = (
        f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n"
        f"BOT_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–ù–ï –ù–ê–ô–î–ï–ù'}\n"
        f"GIGACHAT_AUTH_KEY: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if GIGACHAT_AUTH_KEY else '–ù–ï –ù–ê–ô–î–ï–ù'}\n"
        f"DATABASE_URL: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if DATABASE_URL else '–ù–ï –ù–ê–ô–î–ï–ù'}"
    )
    await message.answer(config_info)

@dp.message(Command("test_giga"))
async def test_giga(message: types.Message):
    try:
        # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_prompt = "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞—é"
        response = await giga.ask(test_prompt)
        
        if response:
            answer = response['choices'][0]['message']['content']
            await message.answer(f"‚úÖ GigaChat –æ—Ç–≤–µ—á–∞–µ—Ç: {answer}")
        else:
            await message.answer("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat:\n{str(e)}"
        logger.error(error_msg)
        await message.answer(error_msg)

@dp.message()
async def handle_unknown(message: types.Message):
    if await check_user_profile(message.from_user.id):
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /nutrition, /generate_meal –∏–ª–∏ /ask")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
